package designMode.creationalMode.singletonMode;

/**
 * 枚举式单例模式
 *
 * 之前所介绍的实现方法其实都有一个缺点：就是可以通过反射机制来打破只能构建一个实例的规则。
 * 反射可以通过构造器来构造不同的对象，即使之前实例在内部进行创建。而枚举则可以防止反射的方式构建对象。
 *
 * 枚举方式之所以能实现单例模式，是因为其自身有且仅有private的构造器，并且枚举类是final的，即它是不能够被继承的。
 * 其次它也能够保证线程安全和自由序列化。尤其是序列化，当枚举类对象被反序列化的时候，
 * 它总是能够保证反序列的返回值是同一个对象。当然枚举也有其自身的不足：就是它并非使用的是懒加载，
 * 单例对象是在枚举类被加载的时候就初始化了。
 *
 * （1）优点：可以对这个唯一实例的访问进行控制；节约系统资源，提高系统性能。
 * （2）缺点：难以扩展，单例职责过重。
 */
public enum EnumSingletonMode {
    INSTANCE;
}
